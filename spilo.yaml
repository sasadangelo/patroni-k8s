################################################################################
#
# This file deploy Patroni cluster on Kubernetes. I tested it on IBM Cloud
# Kubernetes (IKS) and a local cluster based on Vagrant/VirtualBox.
################################################################################
# Originally, Kubernetes, was developed to run stateless applications. For this
# kind of applications the Pods are essentially the same and there should not be
# any distinction. Kubernetes uses Deployment resources to manage this kind of
# applications. However, there are special kind of applications that have a state
# like, for example, database. For this applications Kubernetes recommend to use
# StatefulSet. StatefulSet are very similar to Deployments but the main difference
# is that each Pod is identified by an index.
#
# When the cluster is created the pod/spilodemo-1 is not created until pod/spilodemo-0
# is ready. During un update the cluster isupdated in reverse order (es. 2, 1, 0).
# The StatefulSet is deployed in the "spilons" namespace.
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: spilons
  name: &cluster_name spilodemo
  labels:
    application: spilo
    spilo-cluster: *cluster_name
spec:
  # Bind the StatefulSet with the Pod definition below
  selector:
    matchLabels:
      application: spilo
      spilo-cluster: *cluster_name
  # The StatefulSet need to deploy three Spilo containers: a Primary and two Replicas.
  replicas: 3
  serviceName: *cluster_name
  # Here start the Pod definition
  template:
    # The labels that identify the Pods
    metadata:
      labels:
        application: spilo
        spilo-cluster: *cluster_name
    spec:
      # Spilodemo for performance and High Availability (HA) reasons needs to run one Pod on a
      # single Worker node. Then our deployment need to guarantee the Node Affinity.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: spilo-cluster
                operator: In
                values:
                - spilodemo
            topologyKey: kubernetes.io/hostname
      # service account that allows changing endpoints and assigning pod labels
      # in the given namespace: https://kubernetes.io/docs/user-guide/service-accounts/
      # not required unless you've changed the default service account in the namespace
      # used to deploy Spilo
      serviceAccountName: operator
      containers:
      - name: *cluster_name
        image: sasadangelo/spilo:0.0.4  # put the spilo image here
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: pgdata
          mountPath: /home/postgres/pgdata
        env:
        - name: DCS_ENABLE_KUBERNETES_API
          value: 'true'
        - name: KUBERNETES_SCOPE_LABEL
          value: spilo-cluster
        - name: KUBERNETES_ROLE_LABEL
          value: role
        - name: SPILO_CONFIGURATION
          value: | ## https://github.com/zalando/patroni#yaml-configuration
            bootstrap:
              initdb:
                - auth-host: md5
                - auth-local: trust
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: PGPASSWORD_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: superuser-password
        - name: PGUSER_ADMIN
          value: superadmin
        - name: PGPASSWORD_ADMIN
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: admin-password
        - name: PGPASSWORD_STANDBY
          valueFrom:
            secretKeyRef:
              name: *cluster_name
              key: replication-password
        - name: SCOPE
          value: *cluster_name
        - name: PGROOT
          value: /home/postgres/pgdata/pgroot
      dnsPolicy: None
      dnsConfig:
        nameservers:
        - 10.96.0.10
        searches:
        - default.svc.cluster.local
        - svc.cluster.local
        - cluster.local
        options:
        - name: ndots
          value: "5"
      terminationGracePeriodSeconds: 0
  volumeClaimTemplates:
  - metadata:
      labels:
        application: spilo
        spilo-cluster: *cluster_name
      name: pgdata
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: local-storage

# This is the ClusterIP service used by Spilo to reference the Primary node.
# The Service doesn't have any selector. This is expected because we want to create
# a service with no Endpoint and the reason is explained in the Endpoint comment
# below.
---
apiVersion: v1
kind: Service
metadata:
  namespace: spilons
  name: &cluster_name spilodemo
  labels:
    application: spilo
    spilo-cluster: *cluster_name
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432

# This is the Endpoint associated with the ClusterIP service above. Kubernetes
# binds it with the Service having the same name. Patroni will set up this Resource
# with the IP of the Primary node and it will keep it up to date every time a
# failover/switchover occurs.
---
apiVersion: v1
kind: Endpoints
metadata:
  namespace: spilons
  name: &cluster_name spilodemo
  labels:
    application: spilo
    spilo-cluster: *cluster_name
subsets: []

# This is a dummy Headless service to avoid deletion of cfdb-ccfdb endpoint.
# Basically, Patroni has a feature: https://github.com/zalando/patroni/pull/958
# that create a dummy service called $SCOPE-config, the reason is that Patroni
# has no control on how YAML are written. For this reason, if and Endpoint exists
# with no service K8s consider it orphan and remove it. For this reason, they create
# this dummy service. However, in order it to work the Pod ervice account requires
# "create" verbs for "service" resource.
# If for some reason, Patroni cannot create it we decided to write it here manually.
---
apiVersion: v1
kind: Service
metadata:
  namespace: spilons
  name: spilodemo-config
  labels:
    application: spilo
    spilo-cluster: spilodemo
spec:
  clusterIP: None

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: spilons
  name: operator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: spilons
  name: operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - create
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
# The following privilege is only necessary for creation of headless service
# for patronidemo-config endpoint, in order to prevent cleaning it up by the
# k8s master. You can avoid giving this privilege by explicitly creating the
# service like it is done in this manifest (lines 160..169)
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: spilons
  name: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operator
subjects:
- kind: ServiceAccount
  name: operator
